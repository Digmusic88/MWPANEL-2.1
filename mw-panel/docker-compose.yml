services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mw-panel-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-mwpanel}
      POSTGRES_USER: ${DB_USER:-mwpanel}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-mwpanel123}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - mw-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-mwpanel}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mw-panel-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mw-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (NestJS)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mw-panel-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3000
      DATABASE_URL: postgresql://${DB_USER:-mwpanel}:${DB_PASSWORD:-mwpanel123}@postgres:5432/${DB_NAME:-mwpanel}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key}
    volumes:
      - ./backend/src:/app/src
      - ./backend/uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3000:3000"
    networks:
      - mw-network

  # Frontend (React + Vite)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mw-panel-frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: /api
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    depends_on:
      - backend
    ports:
      - "5173:5173"
    networks:
      - mw-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mw-panel-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./frontend/dist:/usr/share/nginx/html
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    depends_on:
      - backend
      - frontend
    networks:
      - mw-network

  # Certbot for SSL
  certbot:
    image: certbot/certbot
    container_name: mw-panel-certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./frontend/dist:/usr/share/nginx/html
    depends_on:
      - nginx
    command: certonly --webroot --webroot-path=/usr/share/nginx/html --email ${SSL_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN}

volumes:
  pgdata:
    external: true
    name: mw-panel-pgdata
  redis_data:
  certbot-etc:
  certbot-var:

networks:
  mw-network:
    driver: bridge