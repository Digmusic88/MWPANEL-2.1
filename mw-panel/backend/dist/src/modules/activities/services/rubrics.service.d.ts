import { Repository } from 'typeorm';
import { Rubric } from '../entities/rubric.entity';
import { RubricCriterion } from '../entities/rubric-criterion.entity';
import { RubricLevel } from '../entities/rubric-level.entity';
import { RubricCell } from '../entities/rubric-cell.entity';
import { RubricAssessment } from '../entities/rubric-assessment.entity';
import { RubricAssessmentCriterion } from '../entities/rubric-assessment-criterion.entity';
import { Teacher } from '../../teachers/entities/teacher.entity';
import { SubjectAssignment } from '../../students/entities/subject-assignment.entity';
import { CreateRubricDto } from '../dto/create-rubric.dto';
import { UpdateRubricDto } from '../dto/update-rubric.dto';
import { ImportRubricDto } from '../dto/import-rubric.dto';
import { CreateRubricAssessmentDto } from '../dto/rubric-assessment.dto';
import { RubricUtilsService } from './rubric-utils.service';
export declare class RubricsService {
    private rubricsRepository;
    private criteriaRepository;
    private levelsRepository;
    private cellsRepository;
    private assessmentsRepository;
    private assessmentCriteriaRepository;
    private teachersRepository;
    private subjectAssignmentsRepository;
    private rubricUtilsService;
    constructor(rubricsRepository: Repository<Rubric>, criteriaRepository: Repository<RubricCriterion>, levelsRepository: Repository<RubricLevel>, cellsRepository: Repository<RubricCell>, assessmentsRepository: Repository<RubricAssessment>, assessmentCriteriaRepository: Repository<RubricAssessmentCriterion>, teachersRepository: Repository<Teacher>, subjectAssignmentsRepository: Repository<SubjectAssignment>, rubricUtilsService: RubricUtilsService);
    create(createRubricDto: CreateRubricDto, userId: string): Promise<Rubric>;
    findAll(userId: string, includeTemplates?: boolean): Promise<Rubric[]>;
    findOne(id: string): Promise<Rubric>;
    update(id: string, updateRubricDto: UpdateRubricDto, userId: string): Promise<Rubric>;
    remove(id: string, userId: string): Promise<void>;
    publish(id: string, userId: string): Promise<Rubric>;
    previewImportFromChatGPT(format: string, data: string): Promise<any>;
    importFromChatGPT(importDto: ImportRubricDto, userId: string): Promise<Rubric>;
    private updateCellsContent;
    createAssessment(createDto: CreateRubricAssessmentDto): Promise<RubricAssessment>;
    getAssessment(id: string): Promise<RubricAssessment>;
    private getTeacherByUserId;
    private verifyTeacherSubjectAssignmentAccess;
    shareRubric(rubricId: string, teacherIds: string[], userId: string): Promise<Rubric>;
    unshareRubric(rubricId: string, teacherIds: string[], userId: string): Promise<Rubric>;
    getColleagues(userId: string): Promise<any[]>;
    getSharedWithMe(userId: string): Promise<Rubric[]>;
}
