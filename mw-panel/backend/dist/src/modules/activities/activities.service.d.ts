import { Repository } from 'typeorm';
import { Activity } from './entities/activity.entity';
import { ActivityAssessment } from './entities/activity-assessment.entity';
import { ActivityNotification } from './entities/activity-notification.entity';
import { CreateActivityDto } from './dto/create-activity.dto';
import { UpdateActivityDto } from './dto/update-activity.dto';
import { AssessActivityDto, BulkAssessActivityDto } from './dto/assess-activity.dto';
import { ActivityStatisticsDto, TeacherActivitySummaryDto } from './dto/activity-statistics.dto';
import { SubjectAssignmentWithStudentsDto } from './dto/subject-assignment-with-students.dto';
import { CreateFromTemplateDto } from './dto/activity-template.dto';
import { SubjectActivitySummaryDto } from './dto/subject-activity-summary.dto';
import { ClassGroup } from '../students/entities/class-group.entity';
import { Student } from '../students/entities/student.entity';
import { Family, FamilyStudent } from '../users/entities/family.entity';
import { Teacher } from '../teachers/entities/teacher.entity';
import { SubjectAssignment } from '../students/entities/subject-assignment.entity';
export declare class ActivitiesService {
    private activitiesRepository;
    private assessmentsRepository;
    private notificationsRepository;
    private classGroupsRepository;
    private studentsRepository;
    private familiesRepository;
    private familyStudentsRepository;
    private teachersRepository;
    private subjectAssignmentsRepository;
    constructor(activitiesRepository: Repository<Activity>, assessmentsRepository: Repository<ActivityAssessment>, notificationsRepository: Repository<ActivityNotification>, classGroupsRepository: Repository<ClassGroup>, studentsRepository: Repository<Student>, familiesRepository: Repository<Family>, familyStudentsRepository: Repository<FamilyStudent>, teachersRepository: Repository<Teacher>, subjectAssignmentsRepository: Repository<SubjectAssignment>);
    create(createActivityDto: CreateActivityDto, teacherId: string): Promise<Activity>;
    findAll(teacherId: string, classGroupId?: string, startDate?: string, endDate?: string): Promise<Activity[]>;
    findOne(id: string): Promise<Activity>;
    update(id: string, updateActivityDto: UpdateActivityDto, teacherId: string): Promise<Activity>;
    remove(id: string, teacherId: string): Promise<void>;
    assessStudent(activityId: string, studentId: string, assessDto: AssessActivityDto, teacherId: string, userId?: string): Promise<ActivityAssessment>;
    bulkAssess(activityId: string, bulkAssessDto: BulkAssessActivityDto, teacherId: string, userId?: string): Promise<ActivityAssessment[]>;
    getActivityStatistics(activityId: string, teacherId: string): Promise<ActivityStatisticsDto>;
    getTeacherSummary(teacherId: string): Promise<TeacherActivitySummaryDto>;
    getFamilyActivities(familyUserId: string, studentId?: string, limit?: number): Promise<ActivityAssessment[]>;
    private createAssessmentRecords;
    private validateAssessmentValue;
    private verifyTeacherAccess;
    private createFamilyNotification;
    private verifyFamilyStudentAccess;
    private getFamilyStudentIds;
    private shouldNotifyFamily;
    private getTeacherIdFromUserId;
    createByUserId(createActivityDto: CreateActivityDto, userId: string): Promise<Activity>;
    findAllByUserId(userId: string, classGroupId?: string, startDate?: string, endDate?: string): Promise<Activity[]>;
    updateByUserId(id: string, updateActivityDto: UpdateActivityDto, userId: string): Promise<Activity>;
    removeByUserId(id: string, userId: string): Promise<void>;
    assessStudentByUserId(activityId: string, studentId: string, assessDto: AssessActivityDto, userId: string): Promise<ActivityAssessment>;
    bulkAssessByUserId(activityId: string, bulkAssessDto: BulkAssessActivityDto, userId: string): Promise<ActivityAssessment[]>;
    getActivityStatisticsByUserId(activityId: string, userId: string): Promise<ActivityStatisticsDto>;
    getTeacherSummaryByUserId(userId: string): Promise<TeacherActivitySummaryDto>;
    getTeacherSubjectAssignments(teacherId: string): Promise<SubjectAssignmentWithStudentsDto[]>;
    getTeacherSubjectAssignmentsByUserId(userId: string): Promise<SubjectAssignmentWithStudentsDto[]>;
    findActivitiesBySubjectAssignmentUserId(subjectAssignmentId: string, userId: string, includeArchived?: boolean): Promise<Activity[]>;
    getSubjectActivitySummaryByUserId(subjectAssignmentId: string, userId: string): Promise<SubjectActivitySummaryDto>;
    getTeacherTemplatesByUserId(userId: string): Promise<Activity[]>;
    createFromTemplateByUserId(createFromTemplateDto: CreateFromTemplateDto, userId: string): Promise<Activity>;
    toggleArchiveByUserId(activityId: string, userId: string): Promise<Activity>;
    findActivitiesBySubjectAssignment(subjectAssignmentId: string, teacherId: string, includeArchived?: boolean, includeTemplates?: boolean): Promise<Activity[]>;
    findTemplatesByTeacher(teacherId: string): Promise<Activity[]>;
    createFromTemplate(createFromTemplateDto: CreateFromTemplateDto, teacherId: string): Promise<Activity>;
    archiveActivity(activityId: string, teacherId: string): Promise<void>;
    unarchiveActivity(activityId: string, teacherId: string): Promise<void>;
    getSubjectActivitySummary(subjectAssignmentId: string, teacherId: string): Promise<SubjectActivitySummaryDto>;
    private verifyTeacherSubjectAssignmentAccess;
    private createAssessmentRecordsForActivity;
}
