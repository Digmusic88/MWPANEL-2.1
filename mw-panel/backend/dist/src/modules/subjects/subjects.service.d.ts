import { Repository } from 'typeorm';
import { Subject } from '../students/entities/subject.entity';
import { SubjectAssignment } from '../students/entities/subject-assignment.entity';
import { Teacher } from '../teachers/entities/teacher.entity';
import { ClassGroup } from '../students/entities/class-group.entity';
import { Course } from '../students/entities/course.entity';
import { AcademicYear } from '../students/entities/academic-year.entity';
import { CreateSubjectDto } from './dto/create-subject.dto';
import { UpdateSubjectDto } from './dto/update-subject.dto';
import { CreateSubjectAssignmentDto } from './dto/create-subject-assignment.dto';
import { UpdateSubjectAssignmentDto } from './dto/update-subject-assignment.dto';
export declare class SubjectsService {
    private readonly subjectRepository;
    private readonly assignmentRepository;
    private readonly teacherRepository;
    private readonly classGroupRepository;
    private readonly courseRepository;
    private readonly academicYearRepository;
    constructor(subjectRepository: Repository<Subject>, assignmentRepository: Repository<SubjectAssignment>, teacherRepository: Repository<Teacher>, classGroupRepository: Repository<ClassGroup>, courseRepository: Repository<Course>, academicYearRepository: Repository<AcademicYear>);
    findAllSubjects(): Promise<Subject[]>;
    findOneSubject(id: string): Promise<Subject>;
    createSubject(createSubjectDto: CreateSubjectDto): Promise<Subject>;
    updateSubject(id: string, updateSubjectDto: UpdateSubjectDto): Promise<Subject>;
    removeSubject(id: string): Promise<void>;
    findSubjectsByCourse(courseId: string): Promise<Subject[]>;
    findAllAssignments(): Promise<SubjectAssignment[]>;
    findOneAssignment(id: string): Promise<SubjectAssignment>;
    createAssignment(createAssignmentDto: CreateSubjectAssignmentDto): Promise<SubjectAssignment>;
    updateAssignment(id: string, updateAssignmentDto: UpdateSubjectAssignmentDto): Promise<SubjectAssignment>;
    removeAssignment(id: string): Promise<void>;
    findAssignmentsByTeacher(teacherId: string): Promise<SubjectAssignment[]>;
    findAssignmentsByClassGroup(classGroupId: string): Promise<SubjectAssignment[]>;
    findAssignmentsByAcademicYear(academicYearId: string): Promise<SubjectAssignment[]>;
    findSubjectsByStudent(studentId: string): Promise<Subject[]>;
    findSubjectsByTeacherAndGroup(teacherId: string, classGroupId: string): Promise<Subject[]>;
    findSubjectsByTeacher(teacherId: string): Promise<Subject[]>;
    findAssignmentDetails(teacherId: string, subjectId: string, classGroupId: string): Promise<SubjectAssignment | null>;
    getSubjectStatistics(): Promise<{
        totalSubjects: number;
        totalAssignments: number;
        subjectsWithoutAssignments: number;
        teachersWithAssignments: number;
        assignmentsPerSubject: string;
    }>;
    canTeacherEvaluateSubject(teacherId: string, subjectId: string, studentId: string): Promise<boolean>;
}
