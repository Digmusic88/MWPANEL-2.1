import { Repository } from 'typeorm';
import { Classroom } from '../students/entities/classroom.entity';
import { TimeSlot } from '../students/entities/time-slot.entity';
import { ScheduleSession } from '../students/entities/schedule-session.entity';
import { AcademicCalendar } from '../students/entities/academic-calendar.entity';
import { EducationalLevel } from '../students/entities/educational-level.entity';
import { SubjectAssignment } from '../students/entities/subject-assignment.entity';
import { AcademicYear } from '../students/entities/academic-year.entity';
import { CreateClassroomDto } from './dto/create-classroom.dto';
import { UpdateClassroomDto } from './dto/update-classroom.dto';
import { CreateTimeSlotDto } from './dto/create-time-slot.dto';
import { UpdateTimeSlotDto } from './dto/update-time-slot.dto';
import { CreateScheduleSessionDto } from './dto/create-schedule-session.dto';
import { UpdateScheduleSessionDto } from './dto/update-schedule-session.dto';
export declare class SchedulesService {
    private readonly classroomRepository;
    private readonly timeSlotRepository;
    private readonly scheduleSessionRepository;
    private readonly academicCalendarRepository;
    private readonly educationalLevelRepository;
    private readonly subjectAssignmentRepository;
    private readonly academicYearRepository;
    constructor(classroomRepository: Repository<Classroom>, timeSlotRepository: Repository<TimeSlot>, scheduleSessionRepository: Repository<ScheduleSession>, academicCalendarRepository: Repository<AcademicCalendar>, educationalLevelRepository: Repository<EducationalLevel>, subjectAssignmentRepository: Repository<SubjectAssignment>, academicYearRepository: Repository<AcademicYear>);
    findAllClassrooms(): Promise<Classroom[]>;
    findOneClassroom(id: string): Promise<Classroom>;
    createClassroom(createClassroomDto: CreateClassroomDto): Promise<Classroom>;
    updateClassroom(id: string, updateClassroomDto: UpdateClassroomDto): Promise<Classroom>;
    removeClassroom(id: string): Promise<void>;
    findAllTimeSlots(): Promise<TimeSlot[]>;
    findTimeSlotsByEducationalLevel(educationalLevelId: string): Promise<TimeSlot[]>;
    findOneTimeSlot(id: string): Promise<TimeSlot>;
    createTimeSlot(createTimeSlotDto: CreateTimeSlotDto): Promise<TimeSlot>;
    updateTimeSlot(id: string, updateTimeSlotDto: UpdateTimeSlotDto): Promise<TimeSlot>;
    removeTimeSlot(id: string): Promise<void>;
    findAllScheduleSessions(): Promise<ScheduleSession[]>;
    findScheduleSessionsByTeacher(teacherId: string): Promise<ScheduleSession[]>;
    findScheduleSessionsByClassGroup(classGroupId: string): Promise<ScheduleSession[]>;
    findScheduleSessionsByClassroom(classroomId: string): Promise<ScheduleSession[]>;
    createScheduleSession(createScheduleSessionDto: CreateScheduleSessionDto): Promise<ScheduleSession>;
    private checkScheduleConflicts;
    updateScheduleSession(id: string, updateScheduleSessionDto: UpdateScheduleSessionDto): Promise<ScheduleSession>;
    removeScheduleSession(id: string): Promise<void>;
}
